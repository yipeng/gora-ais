/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package ais.raw.nmea;  
@SuppressWarnings("all")
public class RawNMEA extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawNMEA\",\"namespace\":\"ais.raw.nmea\",\"fields\":[{\"name\":\"packetType\",\"type\":\"string\"},{\"name\":\"fragmentCount\",\"type\":\"string\"},{\"name\":\"fragmentNum\",\"type\":\"string\"},{\"name\":\"messageId\",\"type\":\"string\"},{\"name\":\"channelCode\",\"type\":\"string\"},{\"name\":\"dataPayload\",\"type\":\"string\"},{\"name\":\"padding\",\"type\":\"string\"},{\"name\":\"checksum\",\"type\":\"string\"}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    PACKET_TYPE(0, "packetType"),
    FRAGMENT_COUNT(1, "fragmentCount"),
    FRAGMENT_NUM(2, "fragmentNum"),
    MESSAGE_ID(3, "messageId"),
    CHANNEL_CODE(4, "channelCode"),
    DATA_PAYLOAD(5, "dataPayload"),
    PADDING(6, "padding"),
    CHECKSUM(7, "checksum"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "packetType",
  "fragmentCount",
  "fragmentNum",
  "messageId",
  "channelCode",
  "dataPayload",
  "padding",
  "checksum",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return RawNMEA._ALL_FIELDS.length;
  }

  private java.lang.CharSequence packetType;
  private java.lang.CharSequence fragmentCount;
  private java.lang.CharSequence fragmentNum;
  private java.lang.CharSequence messageId;
  private java.lang.CharSequence channelCode;
  private java.lang.CharSequence dataPayload;
  private java.lang.CharSequence padding;
  private java.lang.CharSequence checksum;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return packetType;
    case 1: return fragmentCount;
    case 2: return fragmentNum;
    case 3: return messageId;
    case 4: return channelCode;
    case 5: return dataPayload;
    case 6: return padding;
    case 7: return checksum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: packetType = (java.lang.CharSequence)(value); break;
    case 1: fragmentCount = (java.lang.CharSequence)(value); break;
    case 2: fragmentNum = (java.lang.CharSequence)(value); break;
    case 3: messageId = (java.lang.CharSequence)(value); break;
    case 4: channelCode = (java.lang.CharSequence)(value); break;
    case 5: dataPayload = (java.lang.CharSequence)(value); break;
    case 6: padding = (java.lang.CharSequence)(value); break;
    case 7: checksum = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'packetType' field.
   */
  public java.lang.CharSequence getPacketType() {
    return packetType;
  }

  /**
   * Sets the value of the 'packetType' field.
   * @param value the value to set.
   */
  public void setPacketType(java.lang.CharSequence value) {
    this.packetType = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'packetType' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPacketTypeDirty() {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'fragmentCount' field.
   */
  public java.lang.CharSequence getFragmentCount() {
    return fragmentCount;
  }

  /**
   * Sets the value of the 'fragmentCount' field.
   * @param value the value to set.
   */
  public void setFragmentCount(java.lang.CharSequence value) {
    this.fragmentCount = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'fragmentCount' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFragmentCountDirty() {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'fragmentNum' field.
   */
  public java.lang.CharSequence getFragmentNum() {
    return fragmentNum;
  }

  /**
   * Sets the value of the 'fragmentNum' field.
   * @param value the value to set.
   */
  public void setFragmentNum(java.lang.CharSequence value) {
    this.fragmentNum = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'fragmentNum' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFragmentNumDirty() {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'messageId' field.
   */
  public java.lang.CharSequence getMessageId() {
    return messageId;
  }

  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.CharSequence value) {
    this.messageId = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'messageId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isMessageIdDirty() {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'channelCode' field.
   */
  public java.lang.CharSequence getChannelCode() {
    return channelCode;
  }

  /**
   * Sets the value of the 'channelCode' field.
   * @param value the value to set.
   */
  public void setChannelCode(java.lang.CharSequence value) {
    this.channelCode = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'channelCode' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isChannelCodeDirty() {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'dataPayload' field.
   */
  public java.lang.CharSequence getDataPayload() {
    return dataPayload;
  }

  /**
   * Sets the value of the 'dataPayload' field.
   * @param value the value to set.
   */
  public void setDataPayload(java.lang.CharSequence value) {
    this.dataPayload = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'dataPayload' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDataPayloadDirty() {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'padding' field.
   */
  public java.lang.CharSequence getPadding() {
    return padding;
  }

  /**
   * Sets the value of the 'padding' field.
   * @param value the value to set.
   */
  public void setPadding(java.lang.CharSequence value) {
    this.padding = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'padding' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPaddingDirty() {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'checksum' field.
   */
  public java.lang.CharSequence getChecksum() {
    return checksum;
  }

  /**
   * Sets the value of the 'checksum' field.
   * @param value the value to set.
   */
  public void setChecksum(java.lang.CharSequence value) {
    this.checksum = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'checksum' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isChecksumDirty() {
    return isDirty(7);
  }

  /** Creates a new RawNMEA RecordBuilder */
  public static ais.raw.nmea.RawNMEA.Builder newBuilder() {
    return new ais.raw.nmea.RawNMEA.Builder();
  }
  
  /** Creates a new RawNMEA RecordBuilder by copying an existing Builder */
  public static ais.raw.nmea.RawNMEA.Builder newBuilder(ais.raw.nmea.RawNMEA.Builder other) {
    return new ais.raw.nmea.RawNMEA.Builder(other);
  }
  
  /** Creates a new RawNMEA RecordBuilder by copying an existing RawNMEA instance */
  public static ais.raw.nmea.RawNMEA.Builder newBuilder(ais.raw.nmea.RawNMEA other) {
    return new ais.raw.nmea.RawNMEA.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for RawNMEA instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawNMEA>
    implements org.apache.avro.data.RecordBuilder<RawNMEA> {

    private java.lang.CharSequence packetType;
    private java.lang.CharSequence fragmentCount;
    private java.lang.CharSequence fragmentNum;
    private java.lang.CharSequence messageId;
    private java.lang.CharSequence channelCode;
    private java.lang.CharSequence dataPayload;
    private java.lang.CharSequence padding;
    private java.lang.CharSequence checksum;

    /** Creates a new Builder */
    private Builder() {
      super(ais.raw.nmea.RawNMEA.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ais.raw.nmea.RawNMEA.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing RawNMEA instance */
    private Builder(ais.raw.nmea.RawNMEA other) {
            super(ais.raw.nmea.RawNMEA.SCHEMA$);
      if (isValidValue(fields()[0], other.packetType)) {
        this.packetType = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.packetType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fragmentCount)) {
        this.fragmentCount = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.fragmentCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fragmentNum)) {
        this.fragmentNum = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.fragmentNum);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.messageId)) {
        this.messageId = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.messageId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.channelCode)) {
        this.channelCode = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.channelCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dataPayload)) {
        this.dataPayload = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.dataPayload);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.padding)) {
        this.padding = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.padding);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.checksum)) {
        this.checksum = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.checksum);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'packetType' field */
    public java.lang.CharSequence getPacketType() {
      return packetType;
    }
    
    /** Sets the value of the 'packetType' field */
    public ais.raw.nmea.RawNMEA.Builder setPacketType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.packetType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'packetType' field has been set */
    public boolean hasPacketType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'packetType' field */
    public ais.raw.nmea.RawNMEA.Builder clearPacketType() {
      packetType = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'fragmentCount' field */
    public java.lang.CharSequence getFragmentCount() {
      return fragmentCount;
    }
    
    /** Sets the value of the 'fragmentCount' field */
    public ais.raw.nmea.RawNMEA.Builder setFragmentCount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fragmentCount = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fragmentCount' field has been set */
    public boolean hasFragmentCount() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fragmentCount' field */
    public ais.raw.nmea.RawNMEA.Builder clearFragmentCount() {
      fragmentCount = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'fragmentNum' field */
    public java.lang.CharSequence getFragmentNum() {
      return fragmentNum;
    }
    
    /** Sets the value of the 'fragmentNum' field */
    public ais.raw.nmea.RawNMEA.Builder setFragmentNum(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.fragmentNum = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fragmentNum' field has been set */
    public boolean hasFragmentNum() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fragmentNum' field */
    public ais.raw.nmea.RawNMEA.Builder clearFragmentNum() {
      fragmentNum = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'messageId' field */
    public java.lang.CharSequence getMessageId() {
      return messageId;
    }
    
    /** Sets the value of the 'messageId' field */
    public ais.raw.nmea.RawNMEA.Builder setMessageId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.messageId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'messageId' field has been set */
    public boolean hasMessageId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'messageId' field */
    public ais.raw.nmea.RawNMEA.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'channelCode' field */
    public java.lang.CharSequence getChannelCode() {
      return channelCode;
    }
    
    /** Sets the value of the 'channelCode' field */
    public ais.raw.nmea.RawNMEA.Builder setChannelCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.channelCode = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'channelCode' field has been set */
    public boolean hasChannelCode() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'channelCode' field */
    public ais.raw.nmea.RawNMEA.Builder clearChannelCode() {
      channelCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'dataPayload' field */
    public java.lang.CharSequence getDataPayload() {
      return dataPayload;
    }
    
    /** Sets the value of the 'dataPayload' field */
    public ais.raw.nmea.RawNMEA.Builder setDataPayload(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.dataPayload = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'dataPayload' field has been set */
    public boolean hasDataPayload() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'dataPayload' field */
    public ais.raw.nmea.RawNMEA.Builder clearDataPayload() {
      dataPayload = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'padding' field */
    public java.lang.CharSequence getPadding() {
      return padding;
    }
    
    /** Sets the value of the 'padding' field */
    public ais.raw.nmea.RawNMEA.Builder setPadding(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.padding = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'padding' field has been set */
    public boolean hasPadding() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'padding' field */
    public ais.raw.nmea.RawNMEA.Builder clearPadding() {
      padding = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'checksum' field */
    public java.lang.CharSequence getChecksum() {
      return checksum;
    }
    
    /** Sets the value of the 'checksum' field */
    public ais.raw.nmea.RawNMEA.Builder setChecksum(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.checksum = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'checksum' field has been set */
    public boolean hasChecksum() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'checksum' field */
    public ais.raw.nmea.RawNMEA.Builder clearChecksum() {
      checksum = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    @Override
    public RawNMEA build() {
      try {
        RawNMEA record = new RawNMEA();
        record.packetType = fieldSetFlags()[0] ? this.packetType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fragmentCount = fieldSetFlags()[1] ? this.fragmentCount : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.fragmentNum = fieldSetFlags()[2] ? this.fragmentNum : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.messageId = fieldSetFlags()[3] ? this.messageId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.channelCode = fieldSetFlags()[4] ? this.channelCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.dataPayload = fieldSetFlags()[5] ? this.dataPayload : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.padding = fieldSetFlags()[6] ? this.padding : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.checksum = fieldSetFlags()[7] ? this.checksum : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public RawNMEA.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public RawNMEA newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends RawNMEA implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'packetType' field.
		   */
	  public java.lang.CharSequence getPacketType() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'packetType' field.
		   * @param value the value to set.
	   */
	  public void setPacketType(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'packetType' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPacketTypeDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fragmentCount' field.
		   */
	  public java.lang.CharSequence getFragmentCount() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fragmentCount' field.
		   * @param value the value to set.
	   */
	  public void setFragmentCount(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fragmentCount' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFragmentCountDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fragmentNum' field.
		   */
	  public java.lang.CharSequence getFragmentNum() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fragmentNum' field.
		   * @param value the value to set.
	   */
	  public void setFragmentNum(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fragmentNum' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFragmentNumDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'messageId' field.
		   */
	  public java.lang.CharSequence getMessageId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'messageId' field.
		   * @param value the value to set.
	   */
	  public void setMessageId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'messageId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isMessageIdDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'channelCode' field.
		   */
	  public java.lang.CharSequence getChannelCode() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'channelCode' field.
		   * @param value the value to set.
	   */
	  public void setChannelCode(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'channelCode' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isChannelCodeDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'dataPayload' field.
		   */
	  public java.lang.CharSequence getDataPayload() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'dataPayload' field.
		   * @param value the value to set.
	   */
	  public void setDataPayload(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'dataPayload' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDataPayloadDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'padding' field.
		   */
	  public java.lang.CharSequence getPadding() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'padding' field.
		   * @param value the value to set.
	   */
	  public void setPadding(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'padding' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPaddingDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'checksum' field.
		   */
	  public java.lang.CharSequence getChecksum() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'checksum' field.
		   * @param value the value to set.
	   */
	  public void setChecksum(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'checksum' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isChecksumDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

